type: edu
files:
- name: src/battleship/Main.java
  visible: true
  text: |
    package battleship;

    public class Main {

        public static void main(String[] args) {
            // Write your code here
        }
    }
  learner_created: false
- name: test/Tests.java
  visible: false
  text: |-
    import org.hyperskill.hstest.dynamic.input.DynamicTestingMethod;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;


    public class Tests extends StageTest<String> {
        @DynamicTestingMethod
        CheckResult exampleTest() {

            TestedProgram main = new TestedProgram();
            String output = main.start().trim();
            String[][] matrix;

            if (!output.toLowerCase().contains("aircraft carrier")) {
                return CheckResult.wrong("After starting the program, you should request " +
                    "the coordinates of the Aircraft Carrier in that way:\n" +
                    "\"Enter the coordinates of the Aircraft Carrier (5 cells):\"");
            }

            output = main.execute("F3 F7").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "F3 F7");

            if (!output.toLowerCase().contains("battleship")) {
                return CheckResult.wrong("After asking for the Aircraft Carrier coordinates, you should request " +
                    "the coordinates of the Battleship in that way:\n" +
                    "\"Enter the coordinates of the Battleship (4 cells):\"");
            }

            output = main.execute("A1 D1").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "A1 D1");

            if (!output.toLowerCase().contains("submarine")) {
                return CheckResult.wrong("After asking for the Battleship coordinates, you should request " +
                    "the coordinates of the Submarine in that way:\n" +
                    "\"Enter the coordinates of the Submarine (3 cells):\"");
            }

            output = main.execute("J7 J10").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake.");
            }

            output = main.execute("J10 J8").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "J10 J8");

            if (!output.toLowerCase().contains("cruiser")) {
                return CheckResult.wrong("After asking for the Submarine coordinates, you should request " +
                    "the coordinates of the Cruiser in that way:\n" +
                    "\"Enter the coordinates of the Cruiser (3 cells):\"");
            }

            output = main.execute("B9 D8").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake.");
            }

            output = main.execute("B9 D9").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "B9 D9");

            if (!output.toLowerCase().contains("destroyer")) {
                return CheckResult.wrong("After asking for the Cruiser coordinates, you should request " +
                    "the coordinates of the Destroyer in that way:\n" +
                    "\"Enter the coordinates of the Destroyer (2 cells):\"");
            }

            output = main.execute("E6 D6").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake. " +
                    "(Too close to another ship)");
            }

            output = main.execute("I2 J2").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "I2 J2");

            if (!output.contains("starts")) {
                return CheckResult.wrong("After entering the coordinates of all ships you should print:\n" +
                    "\"The game starts!\"");
            }

            String[] temp = output.split("starts");
            if (temp.length < 2) {
                return CheckResult.wrong("After printing \"The game starts!\" you should print an empty battle field!");
            }
            output = temp[1];

            if (!matrixIsEmpty(getFieldMatrix(output))) {
                return CheckResult.wrong("After the game starts you should print an empty battle field!");
            }

            output = main.execute("A1");
            if (!output.contains("hit") || !output.contains("ship")) {
                return CheckResult.wrong("After hitting a ship you should print \"You hit a ship!\".");
            }

            matrix = getFieldMatrix(output);
            checkShot(matrix, "A1", output);

            String[] splittedOutput = output.split("ship");
            if (splittedOutput.length < 2) {
                return CheckResult.wrong("Two game fields were expected in the output.");
            }

            matrix = getFieldMatrix(splittedOutput[1]);
            findAllShips(matrix, new String[]{"A1 D1", "B9 D9", "F3 F7", "I2 J2", "J8 J10"});

            return CheckResult.correct();
        }


        @DynamicTestingMethod
        CheckResult test1() {

            TestedProgram main = new TestedProgram();
            String output = main.start().trim();
            String[][] matrix;

            if (!output.toLowerCase().contains("aircraft carrier")) {
                return CheckResult.wrong("After starting the program, you should request " +
                    "the coordinates of the Aircraft Carrier in that way:\n" +
                    "\"Enter the coordinates of the Aircraft Carrier (5 cells):\"");
            }

            output = main.execute("J3 J7").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "J3 J7");

            if (!output.toLowerCase().contains("battleship")) {
                return CheckResult.wrong("After asking for the Aircraft Carrier coordinates, you should request " +
                    "the coordinates of the Battleship in that way:\n" +
                    "\"Enter the coordinates of the Battleship (4 cells):\"");
            }

            output = main.execute("C8 B8");
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake. " +
                    "(Incorrect length of the ship)");
            }

            output = main.execute("C8 F8").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "C8 F8");

            if (!output.toLowerCase().contains("submarine")) {
                return CheckResult.wrong("After asking for the Battleship coordinates, you should request " +
                    "the coordinates of the Submarine in that way:\n" +
                    "\"Enter the coordinates of the Submarine (3 cells):\"");
            }

            output = main.execute("A1 C2").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake.");
            }

            output = main.execute("A1 C1").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "A1 C1");

            if (!output.toLowerCase().contains("cruiser")) {
                return CheckResult.wrong("After asking for the Submarine coordinates, you should request " +
                    "the coordinates of the Cruiser in that way:\n" +
                    "\"Enter the coordinates of the Cruiser (3 cells):\"");
            }

            output = main.execute("H1 H3").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "H1 H3");

            if (!output.toLowerCase().contains("destroyer")) {
                return CheckResult.wrong("After asking for the Cruiser coordinates, you should request " +
                    "the coordinates of the Destroyer in that way:\n" +
                    "\"Enter the coordinates of the Destroyer (2 cells):\"");
            }

            output = main.execute("G2 E2").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake. " +
                    "(Too close to another ship)");
            }

            output = main.execute("B5 C5").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "B5 C5");

            if (!output.contains("starts")) {
                return CheckResult.wrong("After entering the coordinates of all ships you should print:\n" +
                    "\"The game starts!\"");
            }

            String[] temp = output.split("starts");
            if (temp.length < 2) {
                return CheckResult.wrong("After printing \"The game starts!\" you should print an empty battle field!");
            }
            output = temp[1];

            if (!matrixIsEmpty(getFieldMatrix(output))) {
                return CheckResult.wrong("After the game starts you should print an empty battle field!");
            }

            output = main.execute("M1");
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake.");
            }

            output = main.execute("A11");
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake.");
            }

            output = main.execute("E4");
            if (!output.toLowerCase().contains("missed")) {
                return CheckResult.wrong("After missing a ship you should print \"You missed!\".");
            }

            String[] splittedOutput = output.split("missed");
            if (splittedOutput.length < 2) {
                return CheckResult.wrong("Two game field were expected in the output.");
            }

            matrix = getFieldMatrix(splittedOutput[1]);
            checkMissing(matrix, "E4", output);
            findAllShips(matrix, new String[]{"J3 J7", "C8 F8", "A1 C1", "H1 H3", "B5 C5"});

            return CheckResult.correct();
        }


        @DynamicTestingMethod
        CheckResult test2() {

            TestedProgram main = new TestedProgram();
            String output = main.start().trim();
            String[][] matrix;

            if (!output.toLowerCase().contains("aircraft carrier")) {
                return CheckResult.wrong("After starting the program, you should request " +
                    "the coordinates of the Aircraft Carrier in that way:\n" +
                    "\"Enter the coordinates of the Aircraft Carrier (5 cells):\"");
            }

            output = main.execute("J3 J7").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "J3 J7");

            if (!output.toLowerCase().contains("battleship")) {
                return CheckResult.wrong("After asking for the Aircraft Carrier coordinates, you should request " +
                    "the coordinates of the Battleship in that way:\n" +
                    "\"Enter the coordinates of the Battleship (4 cells):\"");
            }

            output = main.execute("C8 B8");
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake. " +
                    "(Incorrect length of the ship)");
            }

            output = main.execute("C8 F8").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "C8 F8");

            if (!output.toLowerCase().contains("submarine")) {
                return CheckResult.wrong("After asking for the Battleship coordinates, you should request " +
                    "the coordinates of the Submarine in that way:\n" +
                    "\"Enter the coordinates of the Submarine (3 cells):\"");
            }

            output = main.execute("A1 C2").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake.");
            }

            output = main.execute("A1 C1").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "A1 C1");

            if (!output.toLowerCase().contains("cruiser")) {
                return CheckResult.wrong("After asking for the Submarine coordinates, you should request " +
                    "the coordinates of the Cruiser in that way:\n" +
                    "\"Enter the coordinates of the Cruiser (3 cells):\"");
            }

            output = main.execute("H1 H3").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "H1 H3");

            if (!output.toLowerCase().contains("destroyer")) {
                return CheckResult.wrong("After asking for the Cruiser coordinates, you should request " +
                    "the coordinates of the Destroyer in that way:\n" +
                    "\"Enter the coordinates of the Destroyer (2 cells):\"");
            }

            output = main.execute("G2 E2").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake. " +
                    "(Too close to another ship)");
            }

            output = main.execute("E5 F5").trim();
            findShipByCoordinates(getFieldMatrix(output), "E5 F5");

            if (!output.contains("starts")) {
                return CheckResult.wrong("After entering the coordinates of all ships you should print:\n" +
                    "\"The game starts!\"");
            }

            output = main.execute("E8");
            checkShot(getFieldMatrix(output), "E8", output);

            if (!output.contains("hit") || !output.contains("ship")) {
                return CheckResult.wrong("After hitting a ship you should print \"You hit a ship!\".");
            }

            String[] splittedOutput = output.split("ship");
            if (splittedOutput.length != 2) {
                return CheckResult.wrong("Two game field were expected in the output. No one was found");
            }

            matrix = getFieldMatrix(splittedOutput[1]);
            findAllShips(matrix, new String[]{"J3 J7", "C8 F8", "A1 C1", "H1 H3", "E5 F5"});

            return CheckResult.correct();
        }


        void findShipByCoordinates(String[][] matrix, String coordinates) {
            int[] coordinatesInt = parseCoordinates(coordinates);

            if (coordinatesInt[0] > coordinatesInt[2]) {
                int swap = coordinatesInt[0];
                coordinatesInt[0] = coordinatesInt[2];
                coordinatesInt[2] = swap;
            } else if (coordinatesInt[1] > coordinatesInt[3]) {
                int swap = coordinatesInt[1];
                coordinatesInt[1] = coordinatesInt[3];
                coordinatesInt[3] = swap;
            }

            if (coordinatesInt[0] == coordinatesInt[2]) {
                int cord = coordinatesInt[0];
                for (int i = coordinatesInt[1]; i <= coordinatesInt[3]; i++) {
                    if (!matrix[cord][i].toLowerCase().equals("x") && !matrix[cord][i].toLowerCase().equals("o")) {
                        throw new WrongAnswer("The ship's cells were not found at the coordinates \"" + coordinates + "\"");
                    }
                }
            } else {
                int cord = coordinatesInt[1];
                for (int i = coordinatesInt[0]; i <= coordinatesInt[2]; i++) {
                    if (!matrix[i][cord].toLowerCase().equals("x") && !matrix[i][cord].toLowerCase().equals("o")) {
                        throw new WrongAnswer("The ship's cells were not found at the \"" + coordinates + "\"");
                    }
                }
            }
        }

        boolean matrixIsEmpty(String[][] matrix) {
            for (String[] strings : matrix) {
                for (int j = 0; j < matrix.length; j++) {
                    if (!strings[j].trim().equals("~")) {
                        return false;
                    }
                }
            }
            return true;
        }

        void checkShot(String[][] matrix, String coordinate, String output) {
            int[] parsedCoordinate = new int[2];
            parsedCoordinate[0] = charToInt(coordinate.toLowerCase().substring(0, 1));
            parsedCoordinate[1] = Integer.parseInt(coordinate.substring(1)) - 1;

            if (!output.toLowerCase().contains("hit")) {
                throw new WrongAnswer(
                    "Your program reacted unpredictably to a hit.\n" +
                        "You should print \"You hit a ship!\".");
            }

            if (output.toLowerCase().contains("missed")) {
                throw new WrongAnswer("Seems like your program prints " +
                    "both \"hit\" and \"missed\".\n" +
                    "You should print only \"You hit a ship!\".");
            }

            if (!matrix[parsedCoordinate[0]][parsedCoordinate[1]].toLowerCase().contains("x")) {
                throw new WrongAnswer("You should print \"X\" in " +
                    " coordinates where you hit the ship.");
            }
        }

        void checkMissing(String[][] matrix, String coordinate, String output) {
            int[] parsedCoordinate = new int[2];
            parsedCoordinate[0] = charToInt(coordinate.toLowerCase().substring(0, 1));
            parsedCoordinate[1] = Integer.parseInt(coordinate.substring(1)) - 1;

            if (!output.toLowerCase().contains("missed")) {
                throw new WrongAnswer(
                    "Your program reacted unpredictably to a miss.\n" +
                        "You should print \"You missed!\".");
            }

            if (output.toLowerCase().contains("hit")) {
                throw new WrongAnswer("Seems like your program prints " +
                    "both \"hit\" and \"missed\".\n" +
                    "You should print only \"You missed!\".");
            }

            if (!matrix[parsedCoordinate[0]][parsedCoordinate[1]].toLowerCase().contains("m")) {
                throw new WrongAnswer("You should print \"M\" in " +
                    " coordinates where you missed.");
            }
        }

        int[] parseCoordinates(String coordinatesString) {
            String[] splittedCoords = coordinatesString.split(" ");
            int[] parsedCoordinates = new int[4];

            parsedCoordinates[0] = charToInt(splittedCoords[0].substring(0, 1));
            parsedCoordinates[1] = Integer.parseInt(splittedCoords[0].substring(1)) - 1;
            parsedCoordinates[2] = charToInt(splittedCoords[1].substring(0, 1));
            parsedCoordinates[3] = Integer.parseInt(splittedCoords[1].substring(1)) - 1;

            return parsedCoordinates;
        }

        int charToInt(String charCoordinate) {
            charCoordinate = charCoordinate.toLowerCase();
            char character = charCoordinate.charAt(0);
            return (int) character - (int) 'a';
        }

        String[][] getFieldMatrix(String output) {

            WrongAnswer cantParseException = new WrongAnswer("Can't parse the game field\n" +
                "Make sure you print it like in examples!");

            String[] splittedOutput = output.split("\n");
            String[][] matrix = new String[10][10];

            try {
                int index = 0;
                while (!(splittedOutput[index].contains("1") &&
                    splittedOutput[index].contains("2") &&
                    splittedOutput[index].contains("10"))) {
                    index++;
                    if (index > 1000) {
                        throw cantParseException;
                    }
                }
                index++;

                for (int i = 0; i < 10; i++) {
                    String temp = splittedOutput[index].substring(2).trim();
                    String[] splittedLine = temp.trim().split(" ");
                    if (splittedLine.length != 10) {
                        throw cantParseException;
                    }
                    matrix[i] = splittedLine;
                    index++;
                }
            } catch (IndexOutOfBoundsException ignored) {
                throw cantParseException;
            }

            return matrix;
        }

        boolean isGameFieldPrinted(String output) {
            return output.contains("1") && output.contains("2") && output.contains("10");
        }

        void findAllShips(String[][] matrix, String[] coordinates) {
            for (String item : coordinates) {
                findShipByCoordinates(matrix, item);
            }
        }
    }
  learner_created: false
- name: src/battleship/BattleField.java
  visible: true
  text: |
    package battleship;

    import java.util.Scanner;

    public class BattleField {
        protected static final Scanner scanner = new Scanner(System.in);

        protected final StringBuilder existingLocation = new StringBuilder();

        protected String[][] battleField;

        private boolean isIterated = false;

        /**
         * to identify the vertical coordinate of the battlefield
         */
        enum VERTICAL_POS { A(1), B(2), C(3), D(4), E(5), F(6), G(7), H(8), I(9), J(10);
            protected final int value;

            VERTICAL_POS(int value) {
                this.value = value;
            }

            protected static VERTICAL_POS constantExists(String name) {

                for (VERTICAL_POS vPos : VERTICAL_POS.values()) {
                    if (vPos.name().equals(name)) {
                        return vPos;
                    }
                }
                return null;
            }

        }

        /**
         *  return the location information.
         */
        enum LOCATION { WRONG_LENGTH, WRONG_LOCATION, TOO_CLOSE, RIGHT_LOCATION }

        /**
         * return the response of the shot.
         */
        enum SHOT { HIT, MISS }

        /**
         * initiate the battlefield
         */
        public BattleField() {
            createBattleField();
        }


        /**
         *  create an array of 11 x 11 where first row will contain the horizontal
         *  position and first column of every row will have the vertical position.
         */
        private void createBattleField() {
            battleField = new String[11][11];
            int character = 65;
            for (int i = 0; i < battleField.length; i++) {
                for (int j = 0; j < battleField[0].length; j++) {
                    if (i == 0) {
                        if (j != 0) {
                            battleField[i][j] = String.valueOf(j);
                        }
                    } else {
                        if (j == 0) {
                            battleField[i][j] = String.valueOf((char) character);
                            ++character;
                        } else {
                            battleField[i][j] = "~";
                        }

                    }
                }
            }
        }


        /**
         * check if the coordinates are correct and whether they can be mapped on the battlefield.
         * @param startPos coordinate start position
         * @param endPos coordinate end position
         * @param currentShip currently which ship needs to be placed.
         * @return return the Location (WRONG_LOCATION, WRONG_LENGTH, TOO_CLOSE, RIGHT_LOCATION)
         */
        private LOCATION check_and_map(String startPos, String endPos, Battleship.SHIPS currentShip) {

            int xSPos = Integer.parseInt(String.valueOf(startPos.charAt(1)));
            /*
             *  if the coordinate length is equal to 3 take the last two character
             */
            if (startPos.length() == 3) {
                String temp = String.valueOf(startPos.charAt(1)) + startPos.charAt(2);
                xSPos = Integer.parseInt(temp);
            }
            int ySPos = (VERTICAL_POS.valueOf(String.valueOf(startPos.charAt(0)))).value;


            int xEPos = Integer.parseInt(String.valueOf(endPos.charAt(1)));
            /*
             *  if the coordinate length is equal to 3 take the last two character
             */
            if (endPos.length() == 3) {
                String temp = String.valueOf(endPos.charAt(1)) + (endPos.charAt(2));
                xEPos = Integer.parseInt(temp);
            }

            int yEPos = (VERTICAL_POS.valueOf(String.valueOf(endPos.charAt(0)))).value;


            /*
             * checking if the given coordinates are in same row or same column
             *
             * here:
             *      xSPos/xEPos - denotes the column no
             *          if this is same and ySPos and yEPos are different means its vertical placement
             *      ySPos/yEPos - denotes the row
             *          if this is same and xSPos and xEPos are different means its horizontal placement
             *
             *      if both xsPos/xEPos and ySPos/yEPos are different meaning they are diagonal, which is not possible.
             */
            if (xSPos != xEPos && ySPos == yEPos) {
                if (xSPos > xEPos) {
                    int temp = xEPos;
                    xEPos = xSPos;
                    xSPos = temp;
                }

                if (currentShip.getCells() == Math.abs(xEPos - xSPos) + 1) {
                    if (this.existingLocation.length() > 0) {
                        /*
                         *  check if there is any ship before the starting position or
                         *  after the ending position that is going to touch your ship.
                         *
                         *  if the ending position is the boundary of the battlefield, then just check
                         *  if the starting position of the ship is not touching the other ship.
                         */
                        if (xEPos != 10 && ("O".equals(this.battleField[ySPos][xSPos - 1]) ||
                                "O".equals(this.battleField[ySPos][xEPos + 1]))) {
                            return LOCATION.TOO_CLOSE;
                        } else if (xEPos == 10 && "O".equals(this.battleField[ySPos][xSPos - 1])) {
                            return LOCATION.TOO_CLOSE;
                        }

                        /*
                         * if the coordinates provided for the ship placement are on the boundary
                         * of the battlefield then check only for the previous position .
                         */
                        for (int i = xSPos; i <= xEPos; i++) {
                            if (ySPos != 10 && ("O".equals(this.battleField[ySPos - 1][i]) ||
                                    "O".equals(this.battleField[ySPos + 1][i]))) {
                                String verticalShip1 = "V" + (ySPos - 1) + i;
                                String verticalShip2 = "V" + (ySPos + 1) + i;

                                /*
                                 *  check if there is any ship in vertical position touching
                                 *  this ship.
                                 */
                                if (this.existingLocation.toString().contains(verticalShip1) ||
                                        this.existingLocation.toString().contains(verticalShip2)) {

                                    /*
                                     *  revert the mapping for the current ship if any vertical ship is
                                     *  going to touch current ship placement.
                                     */
                                    for (;i >= xSPos; i--){
                                        this.battleField[ySPos][i] = "~";

                                        /*
                                         * remove the coordinates of the current ship from the history of the
                                         * coordinates of ship being saved with prefix H for horizontal placement
                                         * and V for Vertical placement of the ship.
                                         */
                                        this.existingLocation.delete(this.existingLocation.length() - 4,
                                                this.existingLocation.length());
                                    }
                                    return LOCATION.TOO_CLOSE;
                                } else {
                                    this.battleField[ySPos][i] = "O";
                                    this.existingLocation.append("H").append(ySPos).append(i).append(" ");
                                }
                            } else if (ySPos == 10 && "O".equals(this.battleField[ySPos - 1][i])) {
                                String verticalShip1 = "V" + (ySPos - 1) + i;

                                if (this.existingLocation.toString().contains(verticalShip1)) {

                                    /*
                                     *  revert the mapping for the current ship if any vertical ship is
                                     *  going to touch current ship placement.
                                     */
                                    for (;i >= xSPos; i--){
                                        this.battleField[ySPos][i] = "~";

                                        /*
                                         * remove the coordinates of the current ship from the history of the
                                         * coordinates of ship being saved with prefix H for horizontal placement
                                         * and V for Vertical placement of the ship.
                                         */
                                        this.existingLocation.delete(this.existingLocation.length() - 4,
                                                this.existingLocation.length());
                                    }
                                    return LOCATION.TOO_CLOSE;
                                } else {
                                    this.battleField[ySPos][i] = "O";
                                    this.existingLocation.append("H").append(ySPos).append(i).append(" ");
                                }

                            } else {
                                this.battleField[ySPos][i] = "O";
                                this.existingLocation.append("H").append(ySPos).append(i).append(" ");
                            }
                        }
                    } else {
                        for (int i = xSPos; i <= xEPos; i++) {
                            this.battleField[ySPos][i] = "O";
                            this.existingLocation.append("H").append(ySPos).append(i).append(" ");
                        }
                    }
                } else {
                    return LOCATION.WRONG_LENGTH;
                }

                return LOCATION.RIGHT_LOCATION;

            } else if (xSPos == xEPos && ySPos != yEPos) {
                if (ySPos > yEPos) {
                    int temp = yEPos;
                    yEPos = ySPos;
                    ySPos = temp;
                }

                if (currentShip.getCells() == Math.abs(yEPos - ySPos) + 1) {
                    if (this.existingLocation.length() > 0) {
                        /*
                         *  check if there is any ship before the starting position or
                         *  after the ending position that is going to touch your ship.
                         *
                         *  if the ending position is the boundary of the battlefield, then just check
                         *  if the starting position of the ship is not touching the other ship.
                         */
                        if (yEPos != 10 && ("O".equals(this.battleField[xSPos][ySPos - 1]) ||
                                "O".equals(this.battleField[xSPos][yEPos + 1]))) {
                            return LOCATION.TOO_CLOSE;
                        } else if (yEPos == 10 && "O".equals(this.battleField[xSPos][ySPos - 1])) {
                            return LOCATION.TOO_CLOSE;
                        }

                        /*
                         *  check if there is any ship in horizonal position touching
                         *  this ship.
                         */
                        for (int i = ySPos; i <= yEPos; i++) {
                            if (xSPos != 10 && ("O".equals(this.battleField[i][xSPos - 1]) ||
                                    "O".equals(this.battleField[i][xSPos + 1]))) {
                                String horizontalShip1 = "H" + i + (xSPos - 1);
                                String horizontalShip2 = "H" + i + (xSPos + 1);

                                if (this.existingLocation.toString().contains(horizontalShip1) ||
                                        this.existingLocation.toString().contains(horizontalShip2)) {

                                    /*
                                     *  revert the mapping for the current ship if any horizontal ship is
                                     *  going to touch current ship placement.
                                     */
                                    for (;i >= ySPos; i--){
                                        this.battleField[i][xSPos] = "~";

                                        /*
                                         * remove the coordinates of the current ship from the history of the
                                         * coordinates of ship being saved with prefix H for horizontal placement
                                         * and V for Vertical placement of the ship.
                                         */
                                        this.existingLocation.delete(this.existingLocation.length() - 4,
                                                this.existingLocation.length());
                                    }
                                    return LOCATION.TOO_CLOSE;
                                } else {
                                    this.battleField[i][xSPos] ="O";
                                    this.existingLocation.append("V").append(i).append(xSPos).append(" ");
                                }
                            } else if (xSPos == 10 && "O".equals(this.battleField[i][xSPos - 1])) {
                                String horizontalShip1 = "H" + i + (xSPos - 1);
                                if (this.existingLocation.toString().contains(horizontalShip1)) {

                                    /*
                                     *  revert the mapping for the current ship if any horizontal ship is
                                     *  going to touch current ship placement.
                                     */
                                    for (;i >= ySPos; i--){
                                        this.battleField[i][xSPos] = "~";

                                        /*
                                         * remove the coordinates of the current ship from the history of the
                                         * coordinates of ship being saved with prefix H for horizontal placement
                                         * and V for Vertical placement of the ship.
                                         */
                                        this.existingLocation.delete(this.existingLocation.length() - 4,
                                                this.existingLocation.length());
                                    }
                                    return LOCATION.TOO_CLOSE;
                                } else {
                                    this.battleField[i][xSPos] = "O";
                                    this.existingLocation.append("V").append(i).append(xSPos).append(" ");
                                }

                            }else {
                                this.battleField[i][xSPos] = "O";
                                this.existingLocation.append("V").append(i).append(xSPos).append(" ");
                            }
                        }
                    } else {
                        for (int i = ySPos; i <= yEPos; i++) {
                            this.battleField[i][xSPos] = "O";
                            this.existingLocation.append("V").append(i).append(xSPos).append(" ");
                        }
                    }

                    return LOCATION.RIGHT_LOCATION;
                } else {
                    return LOCATION.WRONG_LENGTH;
                }
            } else {
                return LOCATION.WRONG_LOCATION;
            }
        }

        /**
         *  display the battlefield
         */
        protected void displayBattleField(){
            for(int i = 0; i < battleField.length; i++) {
                if (i == 0) {
                    System.out.print(" ");
                } else {
                    System.out.print(battleField[i][0]);
                }

                for (int j = 1; j < battleField[0].length; j++) {
                    System.out.print(" " + battleField[i][j]);
                }

                System.out.println();
            }
            System.out.println();
        }


        /**
         * Take the input coordinates of the ship.
         * Validate if the given coordinates length is correct or wrong and print the error message
         * validate if the given coordintate location is correct or wrong and print the error message.
         * if one ship touches the other ship print the error message too close.
         */
        protected boolean mapCoordinates(Battleship.SHIPS currentShip) {
            if (!isIterated) {
                System.out.println("Enter the coordinates of the " + currentShip.getModel() + " (" + currentShip.getCells() +
                        " cells):\n");
            }

            try {
                String inputStr = scanner.nextLine();
                String[] coordinates = inputStr.split("\\s");

                System.out.println();

                LOCATION currentLocation = check_and_map(coordinates[0], coordinates[1], currentShip);

                if (currentLocation.equals(LOCATION.WRONG_LOCATION)){
                    System.out.println("Error! Wrong ship location! Try again:\n");
                    isIterated = true;
                    return false;
                } else if (currentLocation.equals(LOCATION.WRONG_LENGTH)) {
                    System.out.println("Error! Wrong length of the Submarine! Try again:\n");
                    isIterated = true;
                    return false;
                } else if (currentLocation.equals(LOCATION.TOO_CLOSE)) {
                    System.out.println("Error! You placed it too close to another one. Try again.\n");
                    isIterated = true;
                    return false;
                } else if (currentLocation.equals(LOCATION.RIGHT_LOCATION)){
                    isIterated = false;
                    return true;
                }
            } catch(Exception e) {
                System.out.println("An exception occurred : " + e.getCause());
                return false;
            }

            return false;
        }

        /**
         * check if the shot fired hit the target or missed.
         * @param shot one coordinate of the mapped passed.
         * @return return whether its a HIT or MISS
         */
        protected SHOT fireShot(String shot) {
            int xPos = Integer.parseInt(String.valueOf(shot.charAt(1)));
            /*
             *  if the coordinate length is equal to 3 take the last two character
             */
            if (shot.length() == 3) {
                String temp = String.valueOf(shot.charAt(1)) + shot.charAt(2);
                xPos = Integer.parseInt(temp);
            }

            int yPos = (VERTICAL_POS.valueOf(String.valueOf(shot.charAt(0)))).value;

            if ("O".equals(this.battleField[yPos][xPos])) {
                this.battleField[yPos][xPos] = "X";
                return SHOT.HIT;
            }
            else {
                this.battleField[yPos][xPos] = "M";
                return SHOT.MISS;
            }

        }
    }
  learner_created: true
- name: src/battleship/Game.java
  visible: true
  text: |
    package battleship;

    import static battleship.BattleField.scanner;

    public class Game {

        private boolean isIterated = false;

        public Game(Battleship battleship) {
            startGame(battleship);
        }

        private void startGame(Battleship battleship) {
            System.out.println("The game starts!\n");
            battleship.battleField.displayBattleField();
            takeShot(battleship);
        }

        private void takeShot(Battleship battleship) {

            if (!isIterated) {
                System.out.println("Take a shot!\n");
            }

            String coordinate = scanner.next();
            System.out.println();
            int xPos = Integer.parseInt(String.valueOf(coordinate.charAt(1)));
            if (coordinate.length() == 3) {
                String temp = String.valueOf(coordinate.charAt(1)) + coordinate.charAt(2);
                xPos = Integer.parseInt(temp);
            }

            if (BattleField.VERTICAL_POS.constantExists(String.valueOf(coordinate.charAt(0))) == null ||
                    xPos > 10) {
                System.out.println("Error! You entered the wrong coordinates! Try again:\n");
                isIterated = true;
                takeShot(battleship);
            } else {
                BattleField.SHOT response = battleship.battleField.fireShot(coordinate);
                battleship.battleField.displayBattleField();
                if (response.equals(BattleField.SHOT.HIT)) {
                    System.out.println("You hit a ship!");
                } else {
                    System.out.println("You missed!");
                }
                isIterated = false;
            }
        }
    }
  learner_created: true
- name: src/battleship/Battleship.java
  visible: true
  text: |
    package battleship;

    import java.util.Scanner;

    class Battleship {

        protected BattleField battleField;

        /**
         *  help in validating the ship cells with the start and end coordinates and iterate coordinate input in case of
         *  wrong length, wrong location or ship placed too close.
         */
        enum SHIPS { AIRCRAFT_CARRIER(5, "Aircraft Carrier"), BATTLESHIP(4, "Battleship"), SUBMARINE(3, "Submarine"), CRUISER(3, "Cruiser"), DESTROYER(2, "Destroyer");
            private final int value;
            private final String model;

            SHIPS(int value, String model) {
                this.value = value;
                this.model = model;
            }

            protected int getCells() {
                return this.value;
            }

            protected String getModel() {
                return this.model;
            }
        }

        /**
         *
         */
        public Battleship() {
            battleField = new BattleField();
        }


        /**
         *  taking coordinates for 5 ships Aircraft Carrier, Battleship, Submarine.
         *  Cruiser, Destroyer
         *  if the coordinates provided are of wrong length or wrong location or it's too close
         *  to another ship it will iterate again taking the coordinates for the same ship again
         */
        protected void placeBattleShip() {
            boolean allShipsPlaced = false;
            SHIPS currentShip = SHIPS.AIRCRAFT_CARRIER;

            do {
                switch(currentShip) {
                    case AIRCRAFT_CARRIER:
                        if (battleField.mapCoordinates(currentShip)) {
                            battleField.displayBattleField();
                            currentShip = SHIPS.BATTLESHIP;
                        }
                        break;
                    case BATTLESHIP:
                        if (battleField.mapCoordinates(currentShip)) {
                            battleField.displayBattleField();
                            currentShip = SHIPS.SUBMARINE;
                        }
                        break;
                    case SUBMARINE:
                        if (battleField.mapCoordinates(currentShip)) {
                            battleField.displayBattleField();
                            currentShip = SHIPS.CRUISER;
                        }
                        break;
                    case CRUISER:
                        if (battleField.mapCoordinates(currentShip)) {
                            battleField.displayBattleField();
                            currentShip = SHIPS.DESTROYER;
                        }
                        break;
                    case DESTROYER:
                        if (battleField.mapCoordinates(currentShip)) {
                            battleField.displayBattleField();
                            allShipsPlaced = true;
                        }
                        break;

                    default:
                        break;
                }
            } while (!allShipsPlaced);
        }
    }
  learner_created: true
feedback_link: https://hyperskill.org/projects/125/stages/665/implement#comment
status: Solved
feedback:
  message: Congratulations!
  time: Sat, 17 Apr 2021 06:23:11 UTC
record: 3
